openapi: 3.0.0
info:
  title: Fusion DLT Adapter APIs for EVM Blockchains
  version: 1.0.0
  description: REST server for connecting to EVM Blockchains and providing necessary APIs to the Overledger Fusion DLT Adapter Layer
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:5010
    description: Local Development server
  - url: http://localhost:5020
    description: DevNet server
tags:
  - name: Write Operations
    description: Operations for creating proposals and executing signed transactions
  - name: Read Operations
    description: Operations for reading blockchain data
components:
  schemas:
    Location:
      type: object
      required:
        - technology
        - network
      properties:
        technology:
          type: string
          description: The blockchain technology
          example: ethereum
        network:
          type: string
          description: The network name
          example: ethereum sepolia testnet
    FeeInfo:
      type: object
      required:
        - unit
        - amount
      properties:
        unit:
          type: string
          description: The fee unit
          example: ETH
        amount:
          type: string
          description: The fee amount as a string
          example: '0.00000000021'
    Parameter:
      type: object
      required:
        - type
      properties:
        name:
          type: string
          description: Parameter name
          example: recipient
        type:
          type: string
          description: Parameter type
          example: address
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: object
            - type: array
          description: Parameter value
          example: '0x742d35cc6641c72323cab7c8f71c8c3c1ea7cb0a'
    TransferOrigin:
      type: object
      required:
        - originId
      properties:
        originId:
          type: string
          description: Sender address that will be used to sign a transaction in Overwallet
          example: '0x742d35cc6641c72323cab7c8f71c8c3c1ea7cb0a'
    TransferDestination:
      type: object
      required:
        - destinationId
      properties:
        destinationId:
          type: string
          description: Destination address
          example: 0x8ba1f109551bD432803012645Hac136c22C177e9
        totalPaymentAmount:
          $ref: '#/components/schemas/FeeInfo'
        nftTokenId:
          type: string
          description: NFT token ID for non-fungible token transfers
          example: '1234'
    TransferProposal:
      type: object
      required:
        - transferType
        - origins
        - destinations
      properties:
        transferType:
          type: string
          enum:
            - nativeTokenTransfer
            - fungibleTokenTransfer
            - nonFungibleTokenTransfer
          description: Type of transfer
        assetId:
          type: string
          description: Contract address for fungible/non-fungible tokens
          example: '0xA0b86a33E6417c31f8D9b1f681Ff1234567890af'
        origins:
          type: array
          items:
            $ref: '#/components/schemas/TransferOrigin'
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/TransferDestination'
        message:
          type: string
          description: Optional message
          example: Payment for services
        feePayers:
          type: array
          items:
            type: string
          description: Array of fee payer addresses
          example:
            - '0x742d35cc6641c72323cab7c8f71c8c3c1ea7cb0a'
    SmartContractWriteProposal:
      type: object
      required:
        - callerAccountId
        - smartContractId
        - functionName
        - inputParameters
        - outputParameters
      properties:
        callerAccountId:
          type: string
          description: Caller address that will be used to sign a transaction in Overwallet
          example: '0x742d35cc6641c72323cab7c8f71c8c3c1ea7cb0a'
        smartContractId:
          type: string
          description: Smart contract address
          example: '0xA0b86a33E6417c31f8D9b1f681Ff1234567890af'
        functionName:
          type: string
          description: Function name to call
          example: transfer
        inputParameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        outputParameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        isStateMutabilityPayable:
          type: boolean
          default: false
          description: Whether the function is payable
        feePayers:
          type: array
          items:
            type: string
          description: Array of fee payer addresses
        message:
          type: string
          description: Optional message
    SmartContractDeployProposal:
      type: object
      required:
        - deployerAccountId
        - bytecodeToDeploy
        - constructorParameters
      properties:
        deployerAccountId:
          type: string
          description: Deployer address that will be used to sign a transaction in Overwallet
          example: '0x742d35cc6641c72323cab7c8f71c8c3c1ea7cb0a'
        bytecodeToDeploy:
          type: string
          description: Contract bytecode to be deployed, which must begin with "0x"
          example: 0x608060405234801561001057600080fd5b50...
        constructorParameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        feePayers:
          type: array
          items:
            type: string
          description: Array of fee payer addresses
        message:
          type: string
          description: Optional message
    ProposalRequest:
      type: object
      required:
        - location
        - proposalDetails
      properties:
        location:
          $ref: '#/components/schemas/Location'
        nodeToConnect:
          type: string
          description: Optional node URL provided by user, which will be used to connect to the blockchain
          example: https://mainnet.infura.io/v3/your-api-key
        proposalDetails:
          oneOf:
            - $ref: '#/components/schemas/TransferProposal'
            - $ref: '#/components/schemas/SmartContractWriteProposal'
            - $ref: '#/components/schemas/SmartContractDeployProposal'
    EIP155:
      type: object
      required:
        - chainId
        - nonce
        - gasPrice
        - gas
        - to
        - value
        - data
      properties:
        chainId:
          type: integer
          example: 11155111
        nonce:
          type: integer
          example: 42
        gasPrice:
          type: string
          example: '20000000000'
        gas:
          type: string
          example: '21000'
        to:
          type: string
          example: 0x8ba1f109551bD432803012645Hac136c22C177e9
        value:
          type: string
          example: '1000000000000000000'
        data:
          type: string
          example: 0x
    EIP1559:
      type: object
      required:
        - chainId
        - nonce
        - gas
        - maxPriorityFeePerGas
        - maxFeePerGas
        - to
        - value
        - data
        - hardfork
      properties:
        chainId:
          type: integer
          example: 11155111
        nonce:
          type: integer
          example: 42
        gas:
          type: string
          example: '21000'
        maxPriorityFeePerGas:
          type: string
          example: '2000000000'
        maxFeePerGas:
          type: string
          example: '20000000000'
        to:
          type: string
          example: 0x8ba1f109551bD432803012645Hac136c22C177e9
        value:
          type: string
          example: '1000000000000000000'
        data:
          type: string
          example: 0x
        hardfork:
          type: string
          example: london
    ProposalResponse:
      type: object
      required:
        - dltFee
        - nativeData
      properties:
        dltFee:
          $ref: '#/components/schemas/FeeInfo'
        nativeData:
          oneOf:
            - $ref: '#/components/schemas/EIP155'
            - $ref: '#/components/schemas/EIP1559'
    Status:
      type: object
      required:
        - message
        - value
        - timestamp
      properties:
        message:
          type: string
          description: Status message
          example: Transaction submitted successfully
        txHash:
          type: string
          description: Transaction hash (optional)
          example: 0xabc123def456...
        value:
          type: string
          enum:
            - pending
            - success
            - failed
          description: Status value
        timestamp:
          type: string
          description: Timestamp of the status
          example: '2024-01-15T10:30:00Z'
    ExecuteRequest:
      type: object
      required:
        - location
        - signedTransaction
      properties:
        location:
          $ref: '#/components/schemas/Location'
        nodeToConnect:
          type: string
          description: Optional node URL provided by user, which will be used to connect to the blockchain
        signedTransaction:
          type: string
          description: Signed transaction in hexadecimal format, which is provided by Overwallet
          example: '0xf86c098504a817c800825208943535353535353535353535353535353535353535880de0b6b3a76400008025a028ef61340bd939bc2195fe537567866003e1a15d3c71ff63e1590620aa636276a067cbe9d8997f761aecb703304b3800ccf555c9f3dc64214b297fb1966a3b6d83'
    ExecuteResponse:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/Status'
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: Invalid request format
        details:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Additional error details
          example:
            - Field "location" is required
            - Field "proposalDetails" is required
paths:
  /v1/transfer-proposal:
    post:
      summary: Create a transfer proposal
      description: Creates a proposal for transferring tokens (native, fungible, or non-fungible) between accounts
      tags:
        - Write Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ProposalRequest'
                - type: object
                  properties:
                    proposalDetails:
                      $ref: '#/components/schemas/TransferProposal'
            example:
              location:
                technology: ethereum
                network: ethereum sepolia testnet
              proposalDetails:
                transferType: nativeTokenTransfer
                origins:
                  - originId: '0x742d35cc6641c72323cab7c8f71c8c3c1ea7cb0a'
                destinations:
                  - destinationId: 0x8ba1f109551bD432803012645Hac136c22C177e9
                    totalPaymentAmount:
                      unit: ETH
                      amount: '0.0021'
      responses:
        '200':
          description: Transfer proposal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalResponse'
        '400':
          description: Invalid request format or validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/smartContractWrite-proposal:
    post:
      summary: Create a smart contract write proposal
      description: Creates a proposal for calling a smart contract function that modifies state
      tags:
        - Write Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ProposalRequest'
                - type: object
                  properties:
                    proposalDetails:
                      $ref: '#/components/schemas/SmartContractWriteProposal'
            example:
              location:
                technology: ethereum
                network: ethereum sepolia testnet
              proposalDetails:
                callerAccountId: '0x742d35cc6641c72323cab7c8f71c8c3c1ea7cb0a'
                smartContractId: '0xA0b86a33E6417c31f8D9b1f681Ff1234567890af'
                functionName: transfer
                inputParameters:
                  - name: to
                    type: address
                    value: 0x8ba1f109551bD432803012645Hac136c22C177e9
                  - name: amount
                    type: uint256
                    value: '1000000000000000000'
                outputParameters:
                  - name: success
                    type: bool
      responses:
        '200':
          description: Smart contract write proposal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalResponse'
        '400':
          description: Invalid request format or validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/smartContractDeploy-proposal:
    post:
      summary: Create a smart contract deployment proposal
      description: Creates a proposal for deploying a new smart contract to the blockchain
      tags:
        - Write Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ProposalRequest'
                - type: object
                  properties:
                    proposalDetails:
                      $ref: '#/components/schemas/SmartContractDeployProposal'
            example:
              location:
                technology: ethereum
                network: ethereum sepolia testnet
              proposalDetails:
                deployerAccountId: '0x742d35cc6641c72323cab7c8f71c8c3c1ea7cb0a'
                bytecodeToDeploy: 0x608060405234801561001057600080fd5b50...
                constructorParameters:
                  - name: initialSupply
                    type: uint256
                    value: '1000000000000000000000000'
      responses:
        '200':
          description: Smart contract deployment proposal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalResponse'
        '400':
          description: Invalid request format or validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/execute:
    post:
      summary: Execute a signed transaction
      description: Executes a pre-signed transaction on the EVM blockchain
      tags:
        - Write Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteRequest'
            example:
              location:
                technology: ethereum
                network: ethereum sepolia testnet
              signedTransaction: '0xf86c098504a817c800825208943535353535353535353535353535353535353535880de0b6b3a76400008025a028ef61340bd939bc2195fe537567866003e1a15d3c71ff63e1590620aa636276a067cbe9d8997f761aecb703304b3800ccf555c9f3dc64214b297fb1966a3b6d83'
      responses:
        '200':
          description: Transaction executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteResponse'
        '400':
          description: Invalid request format or execution failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/smart-contract-read:
    get:
      summary: Read data from a smart contract
      description: Reads data from a smart contract function (currently not implemented)
      tags:
        - Read Operations
      responses:
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not implemented
  /v1/transaction:
    get:
      summary: Get transaction details
      description: Retrieves details of a specific transaction (currently not implemented)
      tags:
        - Read Operations
      responses:
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not implemented
  /v1/account:
    get:
      summary: Get account information
      description: Retrieves information about a specific account (currently not implemented)
      tags:
        - Read Operations
      responses:
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not implemented
  /v1/block:
    get:
      summary: Get block information
      description: Retrieves information about a specific block (currently not implemented)
      tags:
        - Read Operations
      responses:
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not implemented
  /v1/asset:
    get:
      summary: Get asset information
      description: Retrieves information about a specific asset/token (currently not implemented)
      tags:
        - Read Operations
      responses:
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not implemented
  /v1/location:
    get:
      summary: Get location information
      description: Retrieves information about blockchain network location (currently not implemented)
      tags:
        - Read Operations
      responses:
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not implemented
